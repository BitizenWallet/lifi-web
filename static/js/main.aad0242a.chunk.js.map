{"version":3,"sources":["services/reportWebVitals.ts","index.tsx","services/analytics.ts"],"names":["reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","analytics","initialize","process","App","ReactDOM","render","StrictMode","document","getElementById","sendWebVitals","promise","gtag","w","window","gaCode","Promise","resolve","reject","head","getElementsByTagName","scriptAsync","createElement","setAttribute","onload","onerror","event","error","Error","name","message","JSON","stringify","scriptSync","scriptHTML","innerHTML","onChangeReadyState","readyState","appendChild","removeEventListener","addEventListener","setTimeout","catch","sendPageView","path","location","title","page_path","page_location","page_title","sendEvent","action","label","category","nonInteraction","event_label","event_category","non_interaction","id","value","delta","metric_id","metric_value","metric_delta"],"mappings":"kKAceA,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,+BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,OCDdQ,IAAUC,WAAWC,IAIjB,qDAAgBR,MAAK,YAAc,IAAXS,EAAU,EAAVA,IACtBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAACH,EAAD,MAEFI,SAASC,eAAe,YAShCjB,EAAgBS,IAAUS,gB,+BCxB1B,IAIIC,EAAmC,KAoHjCC,EAAO,WACX,IAAMC,EAAIC,OACND,EAAED,MACJC,EAAED,KAAF,MAAAC,EAAC,YAICZ,EAAY,CAAEC,WAzHD,SAACa,GAClB,OAAKA,GAAqB,KAAXA,EAGXJ,QAIJA,EAAU,IAAIK,SAAQ,SAACC,EAASC,GAC9B,IAAMC,EAAwBX,SAASY,qBAAqB,QAAQ,GAC9DC,EAAiCb,SAASc,cAAc,UAC9DD,EAAYE,aAAa,KAjBL,mBAkBpBF,EAAYE,aAAa,QAAS,IAElCF,EAAYE,aAAa,MAAzB,sDAA+ER,IAC/EM,EAAYG,OAAS,WACnBP,GAAQ,IAGVI,EAAYI,QAAU,SAACC,GACrB,GAAqB,kBAAVA,EACTR,EAAO,iCAAD,OAAkCQ,QACnC,CACL,IAAMC,EAAQ,IAAIC,MAClBD,EAAME,KAAO,gCACbF,EAAMG,QAAUC,KAAKC,UAAUN,EAAO,CAAC,UAAW,YAAa,OAAQ,SACvER,EAAOS,KAIX,IAAMM,EAAgCzB,SAASc,cAAc,UAE7DW,EAAWV,aAAa,KArCL,kBAuCnB,IAAIW,EAAkB,yJAGJnB,EAHI,OAKtBkB,EAAWE,UAAYD,EAEvB,IAAME,EAAqB,SAArBA,IACJ,OAAQ5B,SAAS6B,YACf,IAAK,cACL,IAAK,WACHlB,EAAKmB,YAAYjB,GACjBF,EAAKmB,YAAYL,GACjBzB,SAAS+B,oBAAoB,mBAAoBH,KAK3B,aAAxB5B,SAAS6B,WACX7B,SAASgC,iBAAiB,mBAAoBJ,GAE9CA,IAGFK,YAAW,WACTvB,EAAO,IAAIU,MAAM,wBA/DP,SAmENc,OAAM,WAEZ,OAAO,KA/DA/B,GAuHqBgC,aAfX,SAACC,EAAyBC,EAA8BC,GAC3E,OAAOlC,EAAK,QAAS,YAAa,CAChCmC,UAAWH,EACXI,cAAeH,GAAY/B,OAAO+B,SAClCI,WAAYH,GAAStC,SAASsC,SAWYI,UA7B5B,SAChBC,EACAC,EACAC,GAGS,IAFTC,EAEQ,wDACR,OAAO1C,EAAK,QAASuC,EAAQ,CAC3BI,YAAaH,EACbI,eAAgBH,EAChBI,gBAAiBH,KAmBoC5C,cApDnC,SAAC,GAAwC,IAAtCgD,EAAqC,EAArCA,GAAI7B,EAAiC,EAAjCA,KAAM8B,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,MAoBxChD,EAAK,QAASiB,EARD,CACX8B,MAAOC,EAEPC,UAAWH,EACXI,aAAcH,EACdI,aAAcH,MAqCH3D,O","file":"static/js/main.aad0242a.chunk.js","sourcesContent":["import { ReportHandler } from 'web-vitals'\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry)\n      getFID(onPerfEntry)\n      getFCP(onPerfEntry)\n      getLCP(onPerfEntry)\n      getTTFB(onPerfEntry)\n    })\n  }\n}\n\nexport default reportWebVitals\n","import './index.css'\n\nimport React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport analytics from './services/analytics'\nimport reportWebVitals from './services/reportWebVitals'\n\nanalytics.initialize(process.env.REACT_APP_ANALYTICS_ID)\n\nswitch (process.env.REACT_APP_PACKAGE) {\n  case 'lifi':\n    import('./App').then(({ App }) => {\n      ReactDOM.render(\n        <React.StrictMode>\n          <App />\n        </React.StrictMode>,\n        document.getElementById('root'),\n      )\n    })\n    break\n}\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals(analytics.sendWebVitals)\n","import { Metric } from 'web-vitals'\n\nconst SCRIPT_ASYNC_ID = 'gaScriptAsyncId'\nconst SCRIPT_SYNC_ID = 'gaScriptSyncId'\nconst TIMEOUT = 5000\n\nlet promise: Promise<boolean> | null = null\n\nconst initialize = (gaCode: string | undefined) => {\n  if (!gaCode || gaCode === '') {\n    return promise\n  }\n  if (promise) {\n    return promise\n  }\n\n  promise = new Promise((resolve, reject) => {\n    const head: HTMLHeadElement = document.getElementsByTagName('head')[0]\n    const scriptAsync: HTMLScriptElement = document.createElement('script')\n    scriptAsync.setAttribute('id', SCRIPT_ASYNC_ID)\n    scriptAsync.setAttribute('async', '')\n\n    scriptAsync.setAttribute('src', `https://www.googletagmanager.com/gtag/js?id=${gaCode}`)\n    scriptAsync.onload = () => {\n      resolve(true)\n    }\n\n    scriptAsync.onerror = (event: Event | string): void => {\n      if (typeof event === 'string') {\n        reject(`GA4React intialization failed ${event}`)\n      } else {\n        const error = new Error()\n        error.name = 'GA4React intialization failed'\n        error.message = JSON.stringify(event, ['message', 'arguments', 'type', 'name'])\n        reject(error)\n      }\n    }\n\n    const scriptSync: HTMLScriptElement = document.createElement('script')\n\n    scriptSync.setAttribute('id', SCRIPT_SYNC_ID)\n\n    let scriptHTML: string = `window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);};\n    gtag('js', new Date());\n    gtag('config', '${gaCode}');`\n\n    scriptSync.innerHTML = scriptHTML\n\n    const onChangeReadyState = () => {\n      switch (document.readyState) {\n        case 'interactive':\n        case 'complete':\n          head.appendChild(scriptAsync)\n          head.appendChild(scriptSync)\n          document.removeEventListener('readystatechange', onChangeReadyState)\n          break\n      }\n    }\n\n    if (document.readyState !== 'complete') {\n      document.addEventListener('readystatechange', onChangeReadyState)\n    } else {\n      onChangeReadyState()\n    }\n\n    setTimeout(() => {\n      reject(new Error('Analytics Timeout'))\n    }, TIMEOUT)\n  })\n\n  promise.catch(() => {\n    // failed\n    return false\n  })\n}\n\nconst sendWebVitals = ({ id, name, value, delta }: Metric) => {\n  // Universal Analytics\n  // const data = {\n  //   eventCategory: 'Web Vitals',\n  //   eventAction: name,\n  //   eventValue: Math.round(name === 'CLS' ? value * 1000 : value), // values must be integers\n  //   eventLabel: id, // id unique to current page load\n  //   nonInteraction: true, // avoids affecting bounce rate\n  //   transport: 'beacon', // if browser supports it\n  // };\n\n  // Google Analytics 4\n  const data = {\n    value: delta, // Use `delta` so the value can be summed.\n    // Custom params:\n    metric_id: id, // Needed to aggregate events\n    metric_value: value,\n    metric_delta: delta,\n  }\n\n  gtag('event', name, data)\n}\n\nconst sendEvent = (\n  action: any,\n  label: any,\n  category: any,\n  nonInteraction: boolean = false,\n  // eslint-disable-next-line max-params\n): any => {\n  return gtag('event', action, {\n    event_label: label,\n    event_category: category,\n    non_interaction: nonInteraction,\n  })\n}\n\nconst sendPageView = (path: string | Location, location?: string | Location, title?: string) => {\n  return gtag('event', 'page_view', {\n    page_path: path,\n    page_location: location || window.location,\n    page_title: title || document.title,\n  })\n}\n\nconst gtag = (...args: any) => {\n  const w = window as any\n  if (w.gtag) {\n    w.gtag(...args)\n  }\n}\n\nconst analytics = { initialize, sendPageView, sendEvent, sendWebVitals }\n\nexport default analytics\n"],"sourceRoot":""}